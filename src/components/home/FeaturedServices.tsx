'use client';

import Link from 'next/link';
import { useState, useEffect } from 'react';
import { serviceApi, serviceUtils } from '@/lib/api/services';
import { ApiError, Service } from '@/types';

const ArrowRightIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M17 8l4 4m0 0l-4 4m4-4H3"
    />
  </svg>
);

const ClockIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
    />
  </svg>
);

const CheckIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

export default function FeaturedServices() {
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [hoveredService, setHoveredService] = useState<number | null>(null);
  const [expandedServices, setExpandedServices] = useState<Set<number>>(new Set());

  // Default features for services that don't have detailed descriptions
  const getDefaultFeatures = (service: Service): string[] => {
    const name = service.name.toLowerCase();

    if (name.includes('nh·ªõt')) {
      return ['Nh·ªõt ch√≠nh h√£ng', 'Ki·ªÉm tra l·ªçc gi√≥', 'V·ªá sinh bu·ªìng ƒë·ªët'];
    }
    if (name.includes('l·ªëp')) {
      return ['L·ªëp ch√≠nh h√£ng', 'V√° l·ªëp kh√¥ng sƒÉm', 'C√¢n b·∫±ng l·ªëp'];
    }
    if (name.includes('ƒëi·ªán')) {
      return ['Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán', 'Thay bugi', 'S·ª≠a m√°y ph√°t ƒëi·ªán'];
    }
    if (name.includes('phanh')) {
      return ['Thay m√° phanh', 'B·∫£o d∆∞·ª°ng ly h·ª£p', 'Ki·ªÉm tra d·∫ßu phanh'];
    }
    if (name.includes('r·ª≠a')) {
      return ['R·ª≠a xe m√°y chuy√™n nghi·ªáp', 'V·ªá sinh n·ªôi th·∫•t', 'ƒê√°nh b√≥ng s∆°n'];
    }
    if (name.includes('c·ª©u h·ªô')) {
      return ['C√≥ m·∫∑t nhanh ch√≥ng', 'H·ªó tr·ª£ 24/7', 'Ph·ª•c v·ª• t·∫≠n n∆°i'];
    }
    if (name.includes('ƒë·∫°i tu')) {
      return ['Ki·ªÉm tra to√†n di·ªán', 'Thay th·∫ø linh ki·ªán m·ªõi', 'B·∫£o h√†nh d√†i h·∫°n'];
    }
    if (name.includes('b·∫£o d∆∞·ª°ng')) {
      return ['B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥', 'Ki·ªÉm tra chi ti·∫øt', 'T∆∞ v·∫•n chuy√™n nghi·ªáp'];
    }

    return ['D·ªãch v·ª• chuy√™n nghi·ªáp', 'Ch·∫•t l∆∞·ª£ng cao', 'Gi√° c·∫£ h·ª£p l√Ω'];
  };

  useEffect(() => {
    const fetchFeaturedServices = async () => {
      try {
        setLoading(true);
        setError(null);

        const response = await serviceApi.getFeaturedServices(6);
        setServices(response.data || []);
      } catch (err) {
        const apiError = err as ApiError;
        setError(apiError.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu d·ªãch v·ª•');
        console.error('Failed to fetch featured services:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchFeaturedServices();
  }, []);

  if (loading) {
    return (
      <section className="section bg-gray-50 p-5">
        <div className="container-7xl">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-flex items-center space-x-2 bg-primary-100 text-primary-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
              <span>üî•</span>
              <span>D·ªãch v·ª• n·ªïi b·∫≠t</span>
            </div>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              D·ªãch V·ª• S·ª≠a Ch·ªØa Xe M√°y
              <span className="text-primary-600"> Chuy√™n Nghi·ªáp</span>
            </h2>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
            {[...Array(6)].map((_, index) => (
              <div
                key={index}
                className="bg-white rounded-xl shadow-md overflow-hidden animate-pulse"
              >
                <div className="h-48 bg-gray-300"></div>
                <div className="p-6">
                  <div className="h-6 bg-gray-300 rounded mb-3"></div>
                  <div className="h-4 bg-gray-300 rounded mb-2"></div>
                  <div className="h-4 bg-gray-300 rounded mb-4"></div>
                  <div className="space-y-2 mb-6">
                    <div className="h-3 bg-gray-300 rounded"></div>
                    <div className="h-3 bg-gray-300 rounded"></div>
                    <div className="h-3 bg-gray-300 rounded"></div>
                  </div>
                  <div className="flex space-x-2">
                    <div className="flex-1 h-10 bg-gray-300 rounded"></div>
                    <div className="h-10 w-10 bg-gray-300 rounded"></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    );
  }

  if (error) {
    return (
      <section className="section bg-gray-50 p-5">
        <div className="container-7xl">
          <div className="text-center max-w-3xl mx-auto mb-16">
            <div className="inline-flex items-center space-x-2 bg-primary-100 text-primary-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
              <span>üî•</span>
              <span>D·ªãch v·ª• n·ªïi b·∫≠t</span>
            </div>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              D·ªãch V·ª• S·ª≠a Ch·ªØa Xe M√°y
              <span className="text-primary-600"> Chuy√™n Nghi·ªáp</span>
            </h2>
          </div>

          <div className="text-center py-12">
            <div className="text-red-500 text-lg mb-4">‚ö†Ô∏è {error}</div>
            <button onClick={() => window.location.reload()} className="btn btn-primary">
              Th·ª≠ l·∫°i
            </button>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="section bg-gray-50 p-5">
      <div className="container-7xl">
        {/* Section Header */}
        <div className="text-center max-w-3xl mx-auto mb-16">
          <div className="inline-flex items-center space-x-2 bg-primary-100 text-primary-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
            <span>üî•</span>
            <span>D·ªãch v·ª• n·ªïi b·∫≠t</span>
          </div>

          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            D·ªãch V·ª• S·ª≠a Ch·ªØa Xe M√°y
            <span className="text-primary-600"> Chuy√™n Nghi·ªáp</span>
          </h2>

          <p className="text-lg text-gray-600 leading-relaxed">
            Ch√∫ng t√¥i cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• s·ª≠a ch·ªØa v√† b·∫£o d∆∞·ª°ng xe m√°y v·ªõi ch·∫•t l∆∞·ª£ng cao,
            gi√° c·∫£ h·ª£p l√Ω v√† th·ªùi gian nhanh ch√≥ng.
          </p>
        </div>

        {/* Services Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {services.map((service) => {
            const features = getDefaultFeatures(service);
            const icon = serviceUtils.getServiceIcon(service);
            const price = serviceUtils.formatPrice(service);
            const duration = serviceUtils.formatDuration(service.duration_minutes);
            const imageUrl = serviceUtils.getImageUrl(service);

            return (
              <div
                key={service.id}
                className="bg-white rounded-xl shadow-lg hover:shadow-2xl border border-gray-100 transition-all duration-300 overflow-hidden group transform hover:-translate-y-1"
              >
                {/* Service Image */}
                <div className="relative h-48 bg-gradient-to-br from-gray-100 to-gray-200 overflow-hidden">
                  {imageUrl ? (
                    <img
                      src={`/images/service/${imageUrl}`}
                      alt={service.name}
                      className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                      onError={(e) => {
                        // Fallback to icon if image fails to load
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.nextElementSibling?.classList.remove('hidden');
                      }}
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      <span className="text-6xl opacity-50">{icon}</span>
                    </div>
                  )}

                  {/* Fallback Icon */}
                  <div
                    className={`w-full h-full flex items-center justify-center ${imageUrl ? 'hidden' : ''}`}
                  >
                    <span className="text-6xl opacity-50">{icon}</span>
                  </div>

                  {/* Featured Badge */}
                  {service.is_featured && (
                    <div className="absolute top-4 right-4 bg-secondary-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-lg">
                      Ph·ªï bi·∫øn
                    </div>
                  )}
                </div>

                {/* Card Content */}
                <div className="relative p-6 pb-4">
                  {/* Title */}
                  <h3 className="text-xl font-bold text-gray-900 group-hover:text-primary-600 transition-colors duration-200 mb-2">
                    {service.name}
                  </h3>

                  {/* Short Description */}
                  <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                    {service.short_description || service.description || 'D·ªãch v·ª• chuy√™n nghi·ªáp v·ªõi ƒë·ªôi ng≈© k·ªπ thu·∫≠t vi√™n gi√†u kinh nghi·ªám'}
                  </p>

                  {/* Price Badge */}
                  <div className="bg-gradient-to-r from-primary-50 to-primary-100 border border-primary-200 rounded-lg p-3 mb-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-700">Gi√° d·ªãch v·ª•:</span>
                      <span className="text-xl font-bold text-primary-600">
                        {price}
                      </span>
                    </div>
                  </div>

                  {/* Service Info Grid */}
                  <div className="grid grid-cols-2 gap-3">
                    <div className="flex items-center space-x-2 bg-gray-50 rounded-lg p-2">
                      <ClockIcon />
                      <div className="text-xs">
                        <span className="text-gray-500 block">Th·ªùi gian</span>
                        <span className="font-semibold text-gray-900">{duration}</span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2 bg-gray-50 rounded-lg p-2">
                      <div className="w-4 h-4 flex items-center justify-center">
                        <CheckIcon />
                      </div>
                      <div className="text-xs">
                        <span className="text-gray-500 block">B·∫£o h√†nh</span>
                        <span className="font-semibold text-gray-900">6 th√°ng</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Expandable Features */}
                {service.description && (
                  <div
                    className={`transition-all duration-300 overflow-hidden ${
                      expandedServices.has(service.id) ? 'max-h-48' : 'max-h-0'
                    }`}
                  >
                    <div className="px-6 pb-4">
                      <div className="border-t border-gray-100 pt-4">
                        <h4 className="text-sm font-semibold text-gray-900 mb-3">M√¥ t·∫£ chi ti·∫øt:</h4>
                        <div className="text-sm text-gray-600">{service.description}</div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Card Footer */}
                <div className="px-6 pb-6">
                  <div className="flex gap-3">
                    <button
                      onClick={() => {
                        const newExpanded = new Set(expandedServices);
                        if (expandedServices.has(service.id)) {
                          newExpanded.delete(service.id);
                        } else {
                          newExpanded.add(service.id);
                        }
                        setExpandedServices(newExpanded);
                      }}
                      className="flex-1 bg-primary-600 text-white px-4 py-2.5 rounded-lg font-medium hover:bg-primary-700 transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg flex items-center justify-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                      Xem chi ti·∫øt
                    </button>
                    <Link
                      href={`/book-appointment?service=${service.slug || service.id}`}
                      className="bg-gradient-to-r from-secondary-500 to-secondary-600 text-white px-5 py-2.5 rounded-lg font-medium hover:from-secondary-600 hover:to-secondary-700 transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg flex items-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      ƒê·∫∑t l·ªãch
                    </Link>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Bottom Section */}
        <div className="bg-white rounded-2xl p-8 md:p-12 shadow-lg">
          <div className="grid md:grid-cols-2 gap-8 items-center">
            <div>
              <h3 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">
                Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• b·∫°n c·∫ßn?
              </h3>
              <p className="text-gray-600 mb-6 leading-relaxed">
                Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu d·ªãch v·ª• kh√°c ngo√†i nh·ªØng d·ªãch v·ª• n·ªïi b·∫≠t tr√™n. Li√™n h·ªá v·ªõi
                ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ nhu c·∫ßu c·ªßa b·∫°n.
              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <Link href="/services" className="btn btn-primary">
                  Xem t·∫•t c·∫£ d·ªãch v·ª•
                </Link>
                <Link href="/contact" className="btn btn-outline">
                  Li√™n h·ªá t∆∞ v·∫•n
                </Link>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                <div className="w-12 h-12 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center">
                  <span className="text-xl">üìû</span>
                </div>
                <div>
                  <div className="font-semibold text-gray-900">G·ªçi ngay ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</div>
                  <div className="text-primary-600 font-medium">038 803 7868</div>
                </div>
              </div>

              <div className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                <div className="w-12 h-12 bg-success-100 text-success-600 rounded-full flex items-center justify-center">
                  <span className="text-xl">üí¨</span>
                </div>
                <div>
                  <div className="font-semibold text-gray-900">Chat qua Zalo</div>
                  <div className="text-success-600 font-medium">Ph·∫£n h·ªìi trong 5 ph√∫t</div>
                </div>
              </div>

              <div className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                <div className="w-12 h-12 bg-secondary-100 text-secondary-600 rounded-full flex items-center justify-center">
                  <span className="text-xl">üè™</span>
                </div>
                <div>
                  <div className="font-semibold text-gray-900">Gh√© thƒÉm ti·ªám</div>
                  <div className="text-secondary-600 font-medium">
                    541 Tr·∫ßn H∆∞ng ƒê·∫°o, Ph∆∞·ªùng Ph√∫ L·ª£i, TP C·∫ßn Th∆°
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
