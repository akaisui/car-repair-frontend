'use client';

import { useState, useEffect, useRef } from 'react';

const stats = [
  {
    id: 1,
    icon: 'üë•',
    value: 2000,
    suffix: '+',
    label: 'Kh√°ch h√†ng tin t∆∞·ªüng',
    description: 'ƒê√£ ph·ª•c v·ª• h∆°n 2000 kh√°ch h√†ng v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t',
  },
  {
    id: 2,
    icon: 'üèÜ',
    value: 10,
    suffix: '+',
    label: 'NƒÉm kinh nghi·ªám',
    description: 'H∆°n 10 nƒÉm trong ng√†nh s·ª≠a ch·ªØa xe m√°y',
  },
  {
    id: 3,
    icon: '‚ö°',
    value: 5000,
    suffix: '+',
    label: 'Xe ƒë√£ s·ª≠a ch·ªØa',
    description: 'ƒê√£ th·ª±c hi·ªán th√†nh c√¥ng h∆°n 5000 ca s·ª≠a ch·ªØa',
  },
  {
    id: 4,
    icon: 'üîß',
    value: 15,
    suffix: '',
    label: 'D·ªãch v·ª• chuy√™n nghi·ªáp',
    description: 'Cung c·∫•p ƒëa d·∫°ng c√°c d·ªãch v·ª• t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao',
  },
  {
    id: 5,
    icon: 'üíØ',
    value: 98,
    suffix: '%',
    label: 'Kh√°ch h√†ng h√†i l√≤ng',
    description: 'T·ªâ l·ªá kh√°ch h√†ng h√†i l√≤ng cao v·ªõi d·ªãch v·ª• c·ªßa ch√∫ng t√¥i',
  },
  {
    id: 6,
    icon: 'üöÄ',
    value: 24,
    suffix: '/7',
    label: 'H·ªó tr·ª£ kh·∫©n c·∫•p',
    description: 'S·∫µn s√†ng h·ªó tr·ª£ kh√°ch h√†ng 24/7 trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p',
  },
];

// Custom hook for counting animation
function useCountUp(end: number, duration: number = 2000, start: boolean = false) {
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (!start) return;

    let startTime: number;
    let animationFrame: number;

    const animate = (timestamp: number) => {
      if (!startTime) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1);

      setCount(Math.floor(progress * end));

      if (progress < 1) {
        animationFrame = requestAnimationFrame(animate);
      }
    };

    animationFrame = requestAnimationFrame(animate);

    return () => {
      if (animationFrame) {
        cancelAnimationFrame(animationFrame);
      }
    };
  }, [end, duration, start]);

  return count;
}

// Individual stat card component
interface StatCardProps {
  stat: (typeof stats)[0];
  isVisible: boolean;
  delay: number;
}

function StatCard({ stat, isVisible, delay }: StatCardProps) {
  const [hasStarted, setHasStarted] = useState(false);
  const count = useCountUp(stat.value, 2000, hasStarted);

  useEffect(() => {
    if (isVisible) {
      const timer = setTimeout(() => {
        setHasStarted(true);
      }, delay);
      return () => clearTimeout(timer);
    }
  }, [isVisible, delay]);

  return (
    <div
      className={`bg-white rounded-xl p-6 text-center shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-500 group ${
        isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
      }`}
      style={{ transitionDelay: `${delay}ms` }}
    >
      {/* Icon */}
      <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-primary-500 to-primary-600 rounded-full flex items-center justify-center text-white text-2xl group-hover:scale-110 transition-transform duration-300">
        {stat.icon}
      </div>

      {/* Number */}
      <div className="mb-2">
        <span className="text-3xl md:text-4xl font-bold text-gray-900">
          {hasStarted ? count : 0}
        </span>
        <span className="text-2xl md:text-3xl font-bold text-primary-600">{stat.suffix}</span>
      </div>

      {/* Label */}
      <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-primary-600 transition-colors duration-200">
        {stat.label}
      </h3>

      {/* Description */}
      <p className="text-sm text-gray-600 leading-relaxed">{stat.description}</p>
    </div>
  );
}

export default function StatsSection() {
  const [isVisible, setIsVisible] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const sectionRef = useRef<HTMLElement>(null);

  // Detect mobile device
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);

    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  useEffect(() => {
    // N·∫øu l√† mobile, trigger ngay l·∫≠p t·ª©c sau 1s
    if (isMobile) {
      const mobileTimer = setTimeout(() => {
        setIsVisible(true);
      }, 1000);
      return () => clearTimeout(mobileTimer);
    }

    // Desktop s·ª≠ d·ª•ng intersection observer
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
      }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    // Fallback timeout
    const fallbackTimer = setTimeout(() => {
      setIsVisible(true);
    }, 3000);

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
      clearTimeout(fallbackTimer);
    };
  }, [isMobile]);

  return (
    <section
      ref={sectionRef}
      className="section bg-gradient-to-br p-6 from-primary-50 via-white to-primary-50 relative overflow-hidden"
    >
      {/* Background Decorations */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-primary-100 rounded-full opacity-20 blur-3xl" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-secondary-100 rounded-full opacity-20 blur-3xl" />
      </div>

      <div className="container-7xl relative">
        {/* Section Header */}
        <div className="text-center max-w-3xl mx-auto mb-16">
          <div className="inline-flex items-center space-x-2 bg-primary-100 text-primary-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
            <span>üìä</span>
            <span>Th·ªëng k√™ ·∫•n t∆∞·ª£ng</span>
          </div>

          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Nh·ªØng Con S·ªë
            <span className="text-primary-600"> N√≥i L√™n T·∫•t C·∫£</span>
          </h2>

          <p className="text-lg text-gray-600 leading-relaxed">
            H∆°n 10 nƒÉm ph·ª•c v·ª• trong ng√†nh s·ª≠a ch·ªØa xe m√°y, ch√∫ng t√¥i t·ª± h√†o v·ªõi nh·ªØng th√†nh t·ª±u ƒë·∫°t
            ƒë∆∞·ª£c v√† s·ª± tin t∆∞·ªüng c·ªßa kh√°ch h√†ng.
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
          {stats.map((stat, index) => (
            <StatCard key={stat.id} stat={stat} isVisible={isVisible} delay={index * 100} />
          ))}
        </div>

        {/* Bottom CTA */}
        <div
          className={`text-center transition-all duration-1000 ${
            isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
          }`}
          style={{ transitionDelay: '600ms' }}
        >
          <div className="bg-white rounded-2xl p-8 md:p-12 shadow-lg max-w-4xl mx-auto">
            <div className="grid md:grid-cols-2 gap-8 items-center">
              <div className="text-left">
                <h3 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">
                  B·∫°n s·∫Ω l√† kh√°ch h√†ng th·ª© <span className="text-primary-600">2001?</span>
                </h3>
                <p className="text-gray-600 mb-6 leading-relaxed">
                  H√£y tr·ªü th√†nh m·ªôt ph·∫ßn trong c·ªông ƒë·ªìng kh√°ch h√†ng tin t∆∞·ªüng c·ªßa ch√∫ng t√¥i. ƒê·∫∑t
                  l·ªãch h·∫πn ngay h√¥m nay ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• ch·∫•t l∆∞·ª£ng.
                </p>
                <div className="flex flex-col sm:flex-row gap-4">
                  <a href="/book-appointment" className="btn btn-primary">
                    ƒê·∫∑t l·ªãch ngay
                  </a>
                  <a href="tel:0901234567" className="btn btn-outline">
                    G·ªçi t∆∞ v·∫•n
                  </a>
                </div>
              </div>

              <div className="relative">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gradient-to-br from-primary-500 to-primary-600 text-white p-6 rounded-lg text-center">
                    <div className="text-2xl font-bold">100%</div>
                    <div className="text-sm opacity-90">Cam k·∫øt ch·∫•t l∆∞·ª£ng</div>
                  </div>
                  <div className="bg-gradient-to-br from-success-500 to-success-600 text-white p-6 rounded-lg text-center">
                    <div className="text-2xl font-bold">6 th√°ng</div>
                    <div className="text-sm opacity-90">B·∫£o h√†nh d·ªãch v·ª•</div>
                  </div>
                  <div className="bg-gradient-to-br from-secondary-500 to-secondary-600 text-white p-6 rounded-lg text-center">
                    <div className="text-2xl font-bold">30 ph√∫t</div>
                    <div className="text-sm opacity-90">Th·ªùi gian trung b√¨nh</div>
                  </div>
                  <div className="bg-gradient-to-br from-purple-500 to-purple-600 text-white p-6 rounded-lg text-center">
                    <div className="text-2xl font-bold">24/7</div>
                    <div className="text-sm opacity-90">H·ªó tr·ª£ kh·∫©n c·∫•p</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
