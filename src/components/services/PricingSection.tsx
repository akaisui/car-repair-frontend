'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { serviceApi, serviceUtils } from '@/lib/api/services';
import { Service } from '@/types';

// Mock pricing plans - will be replaced with dynamic data based on services
const staticPricingPlans = [
  {
    id: 'basic',
    name: 'G√≥i C∆° B·∫£n',
    description: 'Ph√π h·ª£p cho b·∫£o d∆∞·ª°ng th∆∞·ªùng xuy√™n',
    price: 150000,
    duration: '30-45 ph√∫t',
    popular: false,
    services: ['Thay nh·ªõt m√°y', 'Ki·ªÉm tra phanh', 'Ki·ªÉm tra l·ªëp', 'V·ªá sinh c∆° b·∫£n', 'Ki·ªÉm tra ƒë√®n'],
    warranty: '3 th√°ng',
    savings: 0,
  },
  {
    id: 'standard',
    name: 'G√≥i Ti√™u Chu·∫©n',
    description: 'B·∫£o d∆∞·ª°ng to√†n di·ªán nh·∫•t',
    price: 280000,
    duration: '60-90 ph√∫t',
    popular: true,
    services: [
      'Thay nh·ªõt + l·ªçc nh·ªõt',
      'Ki·ªÉm tra & b·∫£o d∆∞·ª°ng phanh',
      'Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán',
      'V·ªá sinh bu·ªìng ƒë·ªët',
      'C√¢n b·∫±ng l·ªëp',
      'Ki·ªÉm tra x√≠ch & nh√¥ng',
      'V·ªá sinh to√†n b·ªô xe',
    ],
    warranty: '6 th√°ng',
    savings: 50000,
  },
  {
    id: 'premium',
    name: 'G√≥i Cao C·∫•p',
    description: 'ChƒÉm s√≥c xe nh∆∞ m·ªõi',
    price: 450000,
    duration: '90-120 ph√∫t',
    popular: false,
    services: [
      'T·∫•t c·∫£ d·ªãch v·ª• g√≥i Ti√™u Chu·∫©n',
      'Thay bugi ch√≠nh h√£ng',
      'V·ªá sinh kim phun',
      'Ki·ªÉm tra & s·ª≠a h·ªá th·ªëng ƒëi·ªán',
      'ƒê√°nh b√≥ng s∆°n xe',
      'B·∫£o d∆∞·ª°ng ly h·ª£p',
      'Test to√†n di·ªán 50 ƒëi·ªÉm',
    ],
    warranty: '12 th√°ng',
    savings: 100000,
  },
];

// This will be replaced by API data

const CheckIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const ClockIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
    />
  </svg>
);

const ShieldIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
    />
  </svg>
);

const StarIcon = () => (
  <svg className="w-4 h-4 fill-current text-yellow-400" viewBox="0 0 24 24">
    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
  </svg>
);

function formatPrice(price: number) {
  return price.toLocaleString('vi-VN') + 'ƒë';
}

interface PricingCardProps {
  plan: (typeof staticPricingPlans)[0];
}

function PricingCard({ plan }: PricingCardProps) {
  return (
    <div
      className={`relative bg-white rounded-2xl border-2 transition-all duration-300 hover:shadow-xl ${
        plan.popular
          ? 'border-primary-500 shadow-lg scale-105'
          : 'border-gray-200 hover:border-primary-300'
      }`}
    >
      {/* Popular Badge */}
      {plan.popular && (
        <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
          <div className="bg-primary-500 text-white px-4 py-2 rounded-full text-sm font-semibold flex items-center space-x-1">
            <StarIcon />
            <span>Ph·ªï bi·∫øn nh·∫•t</span>
          </div>
        </div>
      )}

      <div className="p-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h3 className="text-2xl font-bold text-gray-900 mb-2">{plan.name}</h3>
          <p className="text-gray-600 mb-4">{plan.description}</p>

          <div className="mb-4">
            <span className="text-4xl font-bold text-primary-600">{formatPrice(plan.price)}</span>
            {plan.savings > 0 && (
              <div className="text-sm text-success-600 mt-1">
                Ti·∫øt ki·ªám {formatPrice(plan.savings)}
              </div>
            )}
          </div>

          <div className="flex items-center justify-center space-x-4 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <ClockIcon />
              <span>{plan.duration}</span>
            </div>
            <div className="flex items-center space-x-1">
              <ShieldIcon />
              <span>BH: {plan.warranty}</span>
            </div>
          </div>
        </div>

        {/* Services List */}
        <div className="space-y-3 mb-8">
          {plan.services.map((service, index) => (
            <div key={index} className="flex items-center space-x-3">
              <div className="flex-shrink-0 w-5 h-5 bg-success-100 text-success-600 rounded-full flex items-center justify-center">
                <CheckIcon />
              </div>
              <span className="text-gray-700">{service}</span>
            </div>
          ))}
        </div>

        {/* CTA Button */}
        <div className="space-y-3">
          <Link
            href="/book-appointment"
            className={`w-full btn ${plan.popular ? 'btn-primary' : 'btn-outline'} btn-lg`}
          >
            ƒê·∫∑t l·ªãch ngay
          </Link>

          <Link href={`/services/package/${plan.id}`} className="w-full btn btn-ghost text-center">
            Xem chi ti·∫øt
          </Link>
        </div>
      </div>
    </div>
  );
}

export default function PricingSection() {
  const [activeTab, setActiveTab] = useState<'packages' | 'individual'>('packages');
  const [individualServices, setIndividualServices] = useState<Service[]>([]);
  const [loadingServices, setLoadingServices] = useState(false);

  // Fetch individual services for pricing
  useEffect(() => {
    if (activeTab === 'individual') {
      const fetchIndividualServices = async () => {
        try {
          setLoadingServices(true);
          const response = await serviceApi.getServicesWithPricing({
            limit: 20, // Get top services
          });
          if (response.data) {
            setIndividualServices(response.data);
          }
        } catch (error) {
          console.error('Error fetching individual services:', error);
        } finally {
          setLoadingServices(false);
        }
      };

      fetchIndividualServices();
    }
  }, [activeTab]);

  return (
    <section className="section bg-white p-6">
      <div className="container-7xl">
        {/* Section Header */}
        <div className="text-center max-w-3xl mx-auto mb-16">
          <div className="inline-flex items-center space-x-2 bg-success-100 text-success-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
            <span>üí∞</span>
            <span>B·∫£ng gi√° d·ªãch v·ª•</span>
          </div>

          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Gi√° C·∫£
            <span className="text-primary-600"> Minh B·∫°ch & H·ª£p L√Ω</span>
          </h2>

          <p className="text-lg text-gray-600 leading-relaxed">
            Ch√∫ng t√¥i cam k·∫øt cung c·∫•p d·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao v·ªõi m·ª©c gi√° c·∫°nh tranh. Kh√¥ng c√≥ chi
            ph√≠ ·∫©n, b√°o gi√° r√µ r√†ng t·ª´ ƒë·∫ßu.
          </p>
        </div>

        {/* Tab Navigation */}
        <div className="flex justify-center mb-12">
          <div className="bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setActiveTab('packages')}
              className={`px-6 py-3 rounded-md font-medium transition-all duration-200 ${
                activeTab === 'packages'
                  ? 'bg-white text-primary-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              G√≥i d·ªãch v·ª•
            </button>
            <button
              onClick={() => setActiveTab('individual')}
              className={`px-6 py-3 rounded-md font-medium transition-all duration-200 ${
                activeTab === 'individual'
                  ? 'bg-white text-primary-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              D·ªãch v·ª• l·∫ª
            </button>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === 'packages' ? (
          <div>
            {/* Pricing Cards */}
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
              {staticPricingPlans.map((plan) => (
                <PricingCard key={plan.id} plan={plan} />
              ))}
            </div>

            {/* Benefits Section */}
            <div className="bg-gray-50 rounded-2xl p-8 md:p-12">
              <div className="text-center mb-8">
                <h3 className="text-2xl font-bold text-gray-900 mb-4">T·∫°i sao ch·ªçn g√≥i d·ªãch v·ª•?</h3>
              </div>

              <div className="grid md:grid-cols-3 gap-6">
                <div className="text-center">
                  <div className="w-16 h-16 bg-primary-100 text-primary-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-2xl">üí∞</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">Ti·∫øt ki·ªám chi ph√≠</h4>
                  <p className="text-sm text-gray-600">Ti·∫øt ki·ªám 15-25% so v·ªõi l√†m d·ªãch v·ª• l·∫ª</p>
                </div>

                <div className="text-center">
                  <div className="w-16 h-16 bg-success-100 text-success-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-2xl">üõ°Ô∏è</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">B·∫£o h√†nh d√†i h·∫°n</h4>
                  <p className="text-sm text-gray-600">B·∫£o h√†nh l√™n ƒë·∫øn 12 th√°ng cho g√≥i cao c·∫•p</p>
                </div>

                <div className="text-center">
                  <div className="w-16 h-16 bg-secondary-100 text-secondary-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-2xl">‚≠ê</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">D·ªãch v·ª• to√†n di·ªán</h4>
                  <p className="text-sm text-gray-600">Ki·ªÉm tra v√† b·∫£o d∆∞·ª°ng ƒë·∫ßy ƒë·ªß m·ªçi b·ªô ph·∫≠n</p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div>
            {/* Individual Services */}
            {loadingServices ? (
              <div className="text-center py-12">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
                <p className="mt-2 text-gray-600">ƒêang t·∫£i d·ªãch v·ª•...</p>
              </div>
            ) : (
              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
                {individualServices.map((service) => (
                  <div
                    key={service.id}
                    className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow duration-200"
                  >
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex-1">
                        <div className="text-2xl mb-2">{serviceUtils.getServiceIcon(service)}</div>
                        <h4 className="font-semibold text-gray-900">{service.name}</h4>
                        {service.short_description && (
                          <p className="text-sm text-gray-500 mt-1">{service.short_description}</p>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center justify-between mb-4">
                      <span className="text-lg font-bold text-primary-600">
                        {serviceUtils.formatPrice(service)}
                      </span>
                      <span className="text-sm text-gray-500">
                        {serviceUtils.formatDuration(service.duration_minutes)}
                      </span>
                    </div>
                    <div className="flex space-x-2">
                      <Link
                        href="/book-appointment"
                        className="flex-1 px-3 py-2 bg-primary-500 text-white text-sm font-medium rounded-md hover:bg-primary-600 transition-colors text-center"
                      >
                        ƒê·∫∑t l·ªãch
                      </Link>
                      <Link
                        href={`/services/${service.slug}`}
                        className="px-3 py-2 border border-gray-300 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-50 transition-colors"
                      >
                        Chi ti·∫øt
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Individual Services Note */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                </div>
                <div>
                  <h4 className="font-semibold text-yellow-800 mb-1">L∆∞u √Ω v·ªÅ d·ªãch v·ª• l·∫ª</h4>
                  <p className="text-sm text-yellow-700">
                    Gi√° tr√™n ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Gi√° cu·ªëi c√πng s·∫Ω ƒë∆∞·ª£c b√°o sau khi ki·ªÉm
                    tra t√¨nh tr·∫°ng th·ª±c t·∫ø c·ªßa xe. Ch√∫ng t√¥i cam k·∫øt b√°o gi√° minh b·∫°ch tr∆∞·ªõc khi
                    th·ª±c hi·ªán.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Bottom CTA */}
        <div className="text-center mt-16">
          <div className="bg-gradient-to-br from-primary-500 to-primary-600 rounded-2xl p-8 md:p-12 text-white">
            <h3 className="text-2xl md:text-3xl font-bold mb-4">
              C·∫ßn t∆∞ v·∫•n v·ªÅ g√≥i d·ªãch v·ª• ph√π h·ª£p?
            </h3>
            <p className="text-lg text-primary-100 mb-8 max-w-2xl mx-auto">
              ƒê·ªôi ng≈© chuy√™n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω t∆∞ v·∫•n mi·ªÖn ph√≠ ƒë·ªÉ b·∫°n ch·ªçn ƒë∆∞·ª£c g√≥i d·ªãch v·ª• ph√π
              h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <a href="tel:0901234567" className="btn bg-white text-primary-600 hover:bg-gray-100">
                G·ªçi t∆∞ v·∫•n: 0901 234 567
              </a>
              <Link
                href="/contact"
                className="btn border-2 border-white text-white hover:bg-white hover:text-primary-600"
              >
                Nh·∫Øn tin t∆∞ v·∫•n
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
