'use client';

import { useState } from 'react';
import Link from 'next/link';

// Mock data - In real app, this would come from API
const mockRepairHistory = [
  {
    id: 1,
    date: '2024-01-20',
    vehicle: 'Honda Wave RSX 110',
    licensePlate: '59A1-12345',
    services: [
      { name: 'ƒê·∫°i tu ƒë·ªông c∆°', price: 2500000 },
      { name: 'Thay d·∫ßu nh·ªõt', price: 150000 },
      { name: 'Thay l·ªçc gi√≥', price: 80000 },
    ],
    parts: [
      { name: 'Piston Honda Wave', quantity: 1, price: 350000 },
      { name: 'GioƒÉng ƒë·∫ßu m√°y', quantity: 1, price: 120000 },
      { name: 'D·∫ßu nh·ªõt Castrol 10W40', quantity: 1, price: 180000 },
    ],
    mechanic: 'Th·ª£ Nguy·ªÖn VƒÉn B',
    totalCost: 3380000,
    status: 'completed',
    warranty: '6 th√°ng',
    notes: 'ƒê·ªông c∆° ƒë√£ ƒë∆∞·ª£c ƒë·∫°i tu ho√†n to√†n. Kh√°ch h√†ng n√™n thay d·∫ßu sau 1000km ƒë·∫ßu.',
    images: ['/images/repairs/repair-1-1.jpg', '/images/repairs/repair-1-2.jpg'],
  },
  {
    id: 2,
    date: '2024-01-15',
    vehicle: 'Honda Wave RSX 110',
    licensePlate: '59A1-12345',
    services: [
      { name: 'Thay nh·ªõt + B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥', price: 280000 },
      { name: 'Ki·ªÉm tra h·ªá th·ªëng phanh', price: 50000 },
    ],
    parts: [
      { name: 'D·∫ßu nh·ªõt Shell 10W40', quantity: 1, price: 160000 },
      { name: 'L·ªçc d·∫ßu', quantity: 1, price: 45000 },
    ],
    mechanic: 'Th·ª£ L√™ VƒÉn C',
    totalCost: 535000,
    status: 'completed',
    warranty: '3 th√°ng',
    notes: 'B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ 5000km. Xe ƒëang trong t√¨nh tr·∫°ng t·ªët.',
    images: [],
  },
  {
    id: 3,
    date: '2024-01-08',
    vehicle: 'Honda Wave RSX 110',
    licensePlate: '59A1-12345',
    services: [
      { name: 'S·ª≠a phanh tr∆∞·ªõc', price: 200000 },
      { name: 'C√¢n ch·ªânh b√°nh xe', price: 100000 },
    ],
    parts: [
      { name: 'M√° phanh tr∆∞·ªõc Honda', quantity: 1, price: 150000 },
      { name: 'D·∫ßu phanh DOT4', quantity: 1, price: 45000 },
    ],
    mechanic: 'Th·ª£ L√™ VƒÉn C',
    totalCost: 495000,
    status: 'completed',
    warranty: '3 th√°ng',
    notes: 'Thay m√° phanh tr∆∞·ªõc v√† b∆°m d·∫ßu phanh. Phanh ho·∫°t ƒë·ªông t·ªët.',
    images: ['/images/repairs/repair-3-1.jpg'],
  },
  {
    id: 4,
    date: '2023-12-20',
    vehicle: 'Yamaha Sirius',
    licensePlate: '59B2-67890',
    services: [
      { name: 'Thay nh·ªõt', price: 120000 },
      { name: 'V·ªá sinh xe', price: 50000 },
    ],
    parts: [
      { name: 'D·∫ßu nh·ªõt Yamaha 10W30', quantity: 1, price: 140000 },
    ],
    mechanic: 'Th·ª£ V√µ VƒÉn E',
    totalCost: 310000,
    status: 'completed',
    warranty: '2 th√°ng',
    notes: 'Thay d·∫ßu ƒë·ªãnh k·ª≥. Xe Yamaha Sirius ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.',
    images: [],
  },
];

// Icons
const SearchIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
  </svg>
);

const FilterIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
  </svg>
);

const DownloadIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
);

const CalendarIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const UserIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
  </svg>
);

const EyeIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(amount);
};

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('vi-VN', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'completed':
      return 'bg-green-100 text-green-800';
    case 'in_progress':
      return 'bg-blue-100 text-blue-800';
    case 'pending':
      return 'bg-yellow-100 text-yellow-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'completed':
      return 'Ho√†n th√†nh';
    case 'in_progress':
      return 'ƒêang s·ª≠a';
    case 'pending':
      return 'Ch·ªù x·ª≠ l√Ω';
    default:
      return status;
  }
};

export default function RepairHistoryPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedVehicle, setSelectedVehicle] = useState('all');
  const [selectedYear, setSelectedYear] = useState('all');
  const [selectedRepair, setSelectedRepair] = useState<typeof mockRepairHistory[0] | null>(null);

  const filteredHistory = mockRepairHistory.filter((repair) => {
    const matchesSearch = repair.vehicle.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         repair.services.some(service => service.name.toLowerCase().includes(searchTerm.toLowerCase()));

    const matchesVehicle = selectedVehicle === 'all' || repair.vehicle.includes(selectedVehicle);

    const repairYear = new Date(repair.date).getFullYear().toString();
    const matchesYear = selectedYear === 'all' || repairYear === selectedYear;

    return matchesSearch && matchesVehicle && matchesYear;
  });

  const totalSpent = filteredHistory.reduce((sum, repair) => sum + repair.totalCost, 0);
  const totalRepairs = filteredHistory.length;

  const vehicles = Array.from(new Set(mockRepairHistory.map(repair => repair.vehicle)));
  const years = Array.from(new Set(mockRepairHistory.map(repair => new Date(repair.date).getFullYear().toString()))).sort().reverse();

  return (
    <div className="max-w-6xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">L·ªãch s·ª≠ s·ª≠a ch·ªØa</h1>
        <p className="text-gray-600">Theo d√µi t·∫•t c·∫£ c√°c l·∫ßn b·∫£o d∆∞·ª°ng v√† s·ª≠a ch·ªØa xe c·ªßa b·∫°n</p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">T·ªïng s·ªë l·∫ßn s·ª≠a</p>
              <p className="text-2xl font-bold text-gray-900">{totalRepairs}</p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <span className="text-blue-600 text-xl">üîß</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">T·ªïng chi ti√™u</p>
              <p className="text-2xl font-bold text-gray-900">{formatCurrency(totalSpent)}</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <span className="text-green-600 text-xl">üí∞</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Chi ph√≠ trung b√¨nh</p>
              <p className="text-2xl font-bold text-gray-900">{formatCurrency(totalSpent / totalRepairs || 0)}</p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <span className="text-purple-600 text-xl">üìä</span>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1 relative">
            <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n d·ªãch v·ª•..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
          </div>

          <select
            value={selectedVehicle}
            onChange={(e) => setSelectedVehicle(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          >
            <option value="all">T·∫•t c·∫£ xe</option>
            {vehicles.map((vehicle) => (
              <option key={vehicle} value={vehicle}>{vehicle}</option>
            ))}
          </select>

          <select
            value={selectedYear}
            onChange={(e) => setSelectedYear(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          >
            <option value="all">T·∫•t c·∫£ nƒÉm</option>
            {years.map((year) => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>

          <button className="flex items-center space-x-2 px-4 py-2 bg-primary-50 text-primary-600 rounded-lg hover:bg-primary-100 transition-colors duration-200">
            <DownloadIcon />
            <span>Xu·∫•t b√°o c√°o</span>
          </button>
        </div>
      </div>

      {/* Repair History List */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">
            Danh s√°ch s·ª≠a ch·ªØa ({filteredHistory.length})
          </h2>
        </div>

        <div className="divide-y divide-gray-200">
          {filteredHistory.map((repair) => (
            <div key={repair.id} className="p-6 hover:bg-gray-50 transition-colors duration-200">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <h3 className="font-semibold text-gray-900">{repair.vehicle}</h3>
                    <span className="text-sm text-gray-500">({repair.licensePlate})</span>
                    <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(repair.status)}`}>
                      {getStatusText(repair.status)}
                    </span>
                  </div>

                  <div className="flex items-center space-x-4 text-sm text-gray-600 mb-2">
                    <div className="flex items-center space-x-1">
                      <CalendarIcon />
                      <span>{formatDate(repair.date)}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <UserIcon />
                      <span>{repair.mechanic}</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2 mb-2">
                    {repair.services.map((service, index) => (
                      <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                        {service.name}
                      </span>
                    ))}
                  </div>
                </div>

                <div className="text-right">
                  <p className="text-xl font-bold text-gray-900 mb-2">{formatCurrency(repair.totalCost)}</p>
                  <button
                    onClick={() => setSelectedRepair(repair)}
                    className="flex items-center space-x-1 text-primary-600 hover:text-primary-700 text-sm"
                  >
                    <EyeIcon />
                    <span>Chi ti·∫øt</span>
                  </button>
                </div>
              </div>

              {repair.warranty && (
                <div className="flex items-center space-x-2 text-sm">
                  <span className="px-2 py-1 bg-green-100 text-green-700 rounded text-xs">
                    B·∫£o h√†nh: {repair.warranty}
                  </span>
                </div>
              )}
            </div>
          ))}
        </div>

        {filteredHistory.length === 0 && (
          <div className="p-12 text-center">
            <div className="text-4xl mb-4">üîç</div>
            <p className="text-gray-500 mb-4">Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ s·ª≠a ch·ªØa n√†o</p>
            <Link href="/book-appointment" className="btn btn-primary">
              ƒê·∫∑t l·ªãch s·ª≠a xe
            </Link>
          </div>
        )}
      </div>

      {/* Detail Modal */}
      {selectedRepair && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900">Chi ti·∫øt s·ª≠a ch·ªØa</h2>
                <button
                  onClick={() => setSelectedRepair(null)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Ng√†y s·ª≠a</label>
                  <p className="text-gray-900">{formatDate(selectedRepair.date)}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Ph∆∞∆°ng ti·ªán</label>
                  <p className="text-gray-900">{selectedRepair.vehicle} ({selectedRepair.licensePlate})</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Th·ª£ ph·ª• tr√°ch</label>
                  <p className="text-gray-900">{selectedRepair.mechanic}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">B·∫£o h√†nh</label>
                  <p className="text-gray-900">{selectedRepair.warranty}</p>
                </div>
              </div>

              <div className="mb-6">
                <h3 className="font-semibold text-gray-900 mb-3">D·ªãch v·ª• ƒë√£ th·ª±c hi·ªán</h3>
                <div className="space-y-2">
                  {selectedRepair.services.map((service, index) => (
                    <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                      <span className="text-gray-900">{service.name}</span>
                      <span className="font-medium text-gray-900">{formatCurrency(service.price)}</span>
                    </div>
                  ))}
                </div>
              </div>

              {selectedRepair.parts.length > 0 && (
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3">Ph·ª• t√πng ƒë√£ thay</h3>
                  <div className="space-y-2">
                    {selectedRepair.parts.map((part, index) => (
                      <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                        <div>
                          <span className="text-gray-900">{part.name}</span>
                          <span className="text-sm text-gray-500 ml-2">x{part.quantity}</span>
                        </div>
                        <span className="font-medium text-gray-900">{formatCurrency(part.price)}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {selectedRepair.notes && (
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-3">Ghi ch√∫</h3>
                  <p className="text-gray-700 bg-gray-50 p-3 rounded-lg">{selectedRepair.notes}</p>
                </div>
              )}

              <div className="border-t border-gray-200 pt-4">
                <div className="flex justify-between items-center text-lg font-bold">
                  <span>T·ªïng c·ªông:</span>
                  <span className="text-primary-600">{formatCurrency(selectedRepair.totalCost)}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}