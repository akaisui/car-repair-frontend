'use client';

import { useState } from 'react';

const facilityAreas = [
  {
    id: 1,
    name: 'Khu v·ª±c ti·∫øp nh·∫≠n',
    description: 'N∆°i kh√°ch h√†ng ƒë∆∞·ª£c t∆∞ v·∫•n v√† ti·∫øp nh·∫≠n xe m√°y',
    features: [
      'Qu·∫ßy t∆∞ v·∫•n hi·ªán ƒë·∫°i',
      'Khu v·ª±c ch·ªù c√≥ ƒëi·ªÅu h√≤a',
      'Wifi mi·ªÖn ph√≠',
      'N∆∞·ªõc u·ªëng complimentary',
    ],
    image: '/images/facility/reception.jpg',
    size: '50m¬≤',
    equipment: 'H·ªá th·ªëng qu·∫£n l√Ω kh√°ch h√†ng, m√°y in h√≥a ƒë∆°n',
  },
  {
    id: 2,
    name: 'Khu s·ª≠a ch·ªØa ch√≠nh',
    description: 'Khu v·ª±c ch√≠nh cho c√°c c√¥ng vi·ªác s·ª≠a ch·ªØa v√† b·∫£o d∆∞·ª°ng',
    features: [
      'N√¢ng xe chuy√™n d·ª•ng',
      'H·ªá th·ªëng chi·∫øu s√°ng LED',
      'Th√¥ng gi√≥ t·ª± nhi√™n',
      'S√†n ch·ªëng tr∆∞·ª£t',
    ],
    image: '/images/facility/main-workshop.jpg',
    size: '200m¬≤',
    equipment: 'B·ªô d·ª•ng c·ª• chuy√™n nghi·ªáp, m√°y n√©n kh√≠, c·∫ßu n√¢ng',
  },
  {
    id: 3,
    name: 'Khu ch·∫©n ƒëo√°n ƒëi·ªán',
    description: 'Chuy√™n d·ª•ng cho vi·ªác ch·∫©n ƒëo√°n v√† s·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªán',
    features: [
      'Thi·∫øt b·ªã ch·∫©n ƒëo√°n ECU',
      'M√°y test ƒëa nƒÉng',
      'M√¥i tr∆∞·ªùng ch·ªëng tƒ©nh ƒëi·ªán',
      'B√†n l√†m vi·ªác chuy√™n d·ª•ng',
    ],
    image: '/images/facility/electrical.jpg',
    size: '30m¬≤',
    equipment: 'M√°y ch·∫©n ƒëo√°n Bosch, oscilloscope, multimeter chuy√™n d·ª•ng',
  },
  {
    id: 4,
    name: 'Kho ph·ª• t√πng',
    description: 'Kho b·∫£o qu·∫£n ph·ª• t√πng ch√≠nh h√£ng v·ªõi h·ªá th·ªëng qu·∫£n l√Ω hi·ªán ƒë·∫°i',
    features: [
      'H·ªá th·ªëng k·ªá t·ª± ƒë·ªông',
      'Ki·ªÉm so√°t nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m',
      'Camera an ninh 24/7',
      'Ph·∫ßn m·ªÅm qu·∫£n l√Ω t·ªìn kho',
    ],
    image: '/images/facility/warehouse.jpg',
    size: '80m¬≤',
    equipment: 'H·ªá th·ªëng RFID, m√°y ƒë·ªçc m√£ v·∫°ch, ƒëi·ªÅu h√≤a kh√¥ng kh√≠',
  },
  {
    id: 5,
    name: 'Khu r·ª≠a xe',
    description: 'Khu v·ª±c r·ª≠a xe v√† v·ªá sinh xe m√°y chuy√™n nghi·ªáp',
    features: [
      'H·ªá th·ªëng x·ª≠ l√Ω n∆∞·ªõc th·∫£i',
      'M√°y r·ª≠a √°p l·ª±c cao',
      'Khu v·ª±c s·∫•y kh√¥',
      'S√†n tho√°t n∆∞·ªõc t·ªët',
    ],
    image: '/images/facility/wash-area.jpg',
    size: '40m¬≤',
    equipment: 'M√°y r·ª≠a Karcher, h·ªá th·ªëng l·ªçc n∆∞·ªõc, m√°y s·∫•y c√¥ng nghi·ªáp',
  },
  {
    id: 6,
    name: 'VƒÉn ph√≤ng qu·∫£n l√Ω',
    description: 'Khu v·ª±c l√†m vi·ªác c·ªßa ban qu·∫£n l√Ω v√† l∆∞u tr·ªØ h·ªì s∆°',
    features: [
      'H·ªá th·ªëng m√°y t√≠nh hi·ªán ƒë·∫°i',
      'T·ªß ƒë·ª±ng h·ªì s∆° kh√°ch h√†ng',
      'M√°y in, scan chuy√™n d·ª•ng',
      'ƒêi·ªÅu h√≤a v√† √¢m thanh',
    ],
    image: '/images/facility/office.jpg',
    size: '25m¬≤',
    equipment: 'PC, m√°y in laser, t·ªß fireproof, camera gi√°m s√°t',
  },
];

const equipmentList = [
  {
    category: 'Thi·∫øt b·ªã ch·∫©n ƒëo√°n',
    items: [
      { name: 'M√°y ch·∫©n ƒëo√°n Bosch KTS 350', description: 'Ch·∫©n ƒëo√°n l·ªói ECU, ABS' },
      { name: 'M√°y ƒëo kh√≠ th·∫£i', description: 'Ki·ªÉm tra m·ª©c ƒë·ªô √¥ nhi·ªÖm' },
      { name: 'Thi·∫øt b·ªã test ƒëa nƒÉng Fluke', description: 'ƒêo ƒëi·ªán √°p, d√≤ng ƒëi·ªán, ƒëi·ªán tr·ªü' },
      { name: 'Oscilloscope', description: 'Ph√¢n t√≠ch t√≠n hi·ªáu ƒëi·ªán' },
    ],
  },
  {
    category: 'D·ª•ng c·ª• s·ª≠a ch·ªØa',
    items: [
      { name: 'B·ªô c·ªù l√™ t·ª´ 8-32mm', description: 'C√¥ng c·ª• c∆° b·∫£n cho m·ªçi c√¥ng vi·ªác' },
      { name: 'M√°y n√©n kh√≠ 500L', description: 'Cung c·∫•p kh√≠ n√©n cho d·ª•ng c·ª•' },
      { name: 'C·∫ßu n√¢ng xe m√°y', description: 'N√¢ng xe ƒë·ªÉ s·ª≠a ch·ªØa d·ªÖ d√†ng' },
      { name: 'S√∫ng b·∫Øn ·ªëc', description: 'Th√°o l·∫Øp ·ªëc v√≠t nhanh ch√≥ng' },
    ],
  },
  {
    category: 'Thi·∫øt b·ªã an to√†n',
    items: [
      { name: 'H·ªá th·ªëng b√°o ch√°y', description: 'C·∫£nh b√°o s·ªõm khi c√≥ ch√°y n·ªï' },
      { name: 'B√¨nh ch·ªØa ch√°y CO2', description: 'D·∫≠p t·∫Øt ch√°y ƒëi·ªán hi·ªáu qu·∫£' },
      { name: 'Camera an ninh 16 k√™nh', description: 'Gi√°m s√°t 24/7 to√†n b·ªô khu v·ª±c' },
      { name: 'Kh√≥a t·ª´ c·ª≠a ra v√†o', description: 'Ki·ªÉm so√°t ra v√†o an to√†n' },
    ],
  },
];

const safetyStandards = [
  {
    icon: 'üõ°Ô∏è',
    title: 'An to√†n lao ƒë·ªông',
    description: 'ƒê·∫ßy ƒë·ªß trang thi·∫øt b·ªã b·∫£o h·ªô c√° nh√¢n cho nh√¢n vi√™n',
  },
  {
    icon: 'üî•',
    title: 'Ph√≤ng ch√°y ch·ªØa ch√°y',
    description: 'H·ªá th·ªëng PCCC ƒë·∫°t ti√™u chu·∫©n, ki·ªÉm ƒë·ªãnh ƒë·ªãnh k·ª≥',
  },
  {
    icon: 'üå±',
    title: 'B·∫£o v·ªá m√¥i tr∆∞·ªùng',
    description: 'X·ª≠ l√Ω ch·∫•t th·∫£i theo quy ƒë·ªãnh, kh√¥ng g√¢y √¥ nhi·ªÖm',
  },
  {
    icon: 'üìπ',
    title: 'An ninh',
    description: 'Camera gi√°m s√°t 24/7, b·∫£o v·ªá t√†i s·∫£n kh√°ch h√†ng',
  },
];

const PlayIcon = () => (
  <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
    />
  </svg>
);

const EyeIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
    />
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
    />
  </svg>
);

const MapIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
    />
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
    />
  </svg>
);

const CalendarIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
    />
  </svg>
);

export default function FacilityTour() {
  const [selectedArea, setSelectedArea] = useState(facilityAreas[0]);
  const [showVirtualTour, setShowVirtualTour] = useState(false);

  return (
    <section className="section bg-white p-6">
      <div className="container-7xl">
        {/* Section Header */}
        <div className="text-center max-w-3xl mx-auto mb-16">
          <div className="inline-flex items-center space-x-2 bg-primary-100 text-primary-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
            <span>üè¢</span>
            <span>C∆° s·ªü v·∫≠t ch·∫•t</span>
          </div>

          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Kh√°m Ph√°
            <span className="text-primary-600"> C∆° S·ªü Hi·ªán ƒê·∫°i</span>
          </h2>

          <p className="text-lg text-gray-600 leading-relaxed">
            Tham quan c∆° s·ªü v·∫≠t ch·∫•t hi·ªán ƒë·∫°i v·ªõi ƒë·∫ßy ƒë·ªß trang thi·∫øt b·ªã chuy√™n nghi·ªáp ƒë·ªÉ ph·ª•c v·ª•
            kh√°ch h√†ng t·ªët nh·∫•t.
          </p>
        </div>

        {/* Virtual Tour CTA */}
        <div className="bg-gradient-to-br from-primary-500 to-primary-600 rounded-2xl p-8 md:p-12 text-white text-center mb-16">
          <div className="max-w-2xl mx-auto">
            <h3 className="text-2xl md:text-3xl font-bold mb-4">Tour ·∫£o 360¬∞ c∆° s·ªü ti·ªám</h3>
            <p className="text-primary-100 mb-8">
              Kh√°m ph√° to√†n b·ªô c∆° s·ªü c·ªßa ch√∫ng t√¥i ngay t·ª´ nh√† v·ªõi c√¥ng ngh·ªá tour ·∫£o 360¬∞
            </p>
            <button
              onClick={() => setShowVirtualTour(true)}
              className="btn bg-white text-primary-600 hover:bg-gray-100 btn-lg flex items-center space-x-2 mx-auto"
            >
              <PlayIcon />
              <span>B·∫Øt ƒë·∫ßu tour ·∫£o</span>
            </button>
          </div>
        </div>

        {/* Facility Areas */}
        <div className="grid lg:grid-cols-3 gap-8 mb-16">
          {/* Area List */}
          <div className="lg:col-span-1 space-y-4">
            <h3 className="text-xl font-bold text-gray-900 mb-6">C√°c khu v·ª±c ch√≠nh</h3>
            {facilityAreas.map((area) => (
              <button
                key={area.id}
                onClick={() => setSelectedArea(area)}
                className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${
                  selectedArea.id === area.id
                    ? 'border-primary-500 bg-primary-50'
                    : 'border-gray-200 hover:border-primary-300 bg-white'
                }`}
              >
                <h4
                  className={`font-semibold mb-1 ${
                    selectedArea.id === area.id ? 'text-primary-700' : 'text-gray-900'
                  }`}
                >
                  {area.name}
                </h4>
                <p className="text-sm text-gray-600">{area.description}</p>
                <div className="text-xs text-gray-500 mt-2">Di·ªán t√≠ch: {area.size}</div>
              </button>
            ))}
          </div>

          {/* Selected Area Details */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
              {/* Area Image */}
              <div className="h-64 bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center text-white relative">
                <div className="text-center">
                  <div className="text-6xl mb-4">üè≠</div>
                  <h3 className="text-2xl font-bold">{selectedArea.name}</h3>
                  <p className="text-primary-100">{selectedArea.size}</p>
                </div>

                {/* View button */}
                <button className="absolute top-4 right-4 bg-white/20 backdrop-blur-sm rounded-full p-3 hover:bg-white/30 transition-colors duration-200">
                  <EyeIcon />
                </button>
              </div>

              {/* Area Info */}
              <div className="p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-3">{selectedArea.name}</h3>
                <p className="text-gray-600 mb-6">{selectedArea.description}</p>

                {/* Features */}
                <div className="mb-6">
                  <h4 className="font-semibold text-gray-900 mb-3">T√≠nh nƒÉng n·ªïi b·∫≠t:</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {selectedArea.features.map((feature, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-success-500 rounded-full"></span>
                        <span className="text-sm text-gray-600">{feature}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Equipment */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-semibold text-gray-900 mb-2">Thi·∫øt b·ªã ch√≠nh:</h4>
                  <p className="text-sm text-gray-600">{selectedArea.equipment}</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Equipment Details */}
        <div className="mb-16">
          <h3 className="text-2xl font-bold text-gray-900 mb-8 text-center">
            Trang thi·∫øt b·ªã chuy√™n nghi·ªáp
          </h3>

          <div className="grid lg:grid-cols-3 gap-8">
            {equipmentList.map((category, index) => (
              <div key={index} className="bg-gray-50 rounded-xl p-6">
                <h4 className="font-bold text-gray-900 mb-4">{category.category}</h4>
                <div className="space-y-4">
                  {category.items.map((item, itemIndex) => (
                    <div key={itemIndex} className="bg-white rounded-lg p-4 border border-gray-200">
                      <h5 className="font-semibold text-gray-900 mb-1">{item.name}</h5>
                      <p className="text-sm text-gray-600">{item.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Safety Standards */}
        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-2xl p-8 md:p-12 mb-16">
          <h3 className="text-2xl font-bold text-gray-900 mb-8 text-center">Ti√™u chu·∫©n an to√†n</h3>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {safetyStandards.map((standard, index) => (
              <div
                key={index}
                className="bg-white rounded-xl p-6 text-center shadow-sm border border-gray-200"
              >
                <div className="text-4xl mb-4">{standard.icon}</div>
                <h4 className="font-semibold text-gray-900 mb-2">{standard.title}</h4>
                <p className="text-sm text-gray-600">{standard.description}</p>
              </div>
            ))}
          </div>

          <div className="mt-8 p-6 bg-blue-50 border border-blue-200 rounded-xl">
            <h4 className="font-semibold text-blue-900 mb-2">Cam k·∫øt an to√†n</h4>
            <p className="text-sm text-blue-800">
              Ch√∫ng t√¥i tu√¢n th·ªß nghi√™m ng·∫∑t c√°c quy ƒë·ªãnh v·ªÅ an to√†n lao ƒë·ªông, ph√≤ng ch√°y ch·ªØa ch√°y
              v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng. C∆° s·ªü ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh ƒë·ªãnh k·ª≥ b·ªüi c√°c c∆° quan c√≥ th·∫©m quy·ªÅn.
            </p>
          </div>
        </div>

        {/* Visit Information */}
        <div className="bg-white rounded-2xl p-8 md:p-12 shadow-sm border border-gray-200">
          <div className="text-center mb-8">
            <h3 className="text-2xl font-bold text-gray-900 mb-4">ƒê·∫øn thƒÉm c∆° s·ªü c·ªßa ch√∫ng t√¥i</h3>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Ch√∫ng t√¥i lu√¥n ch√†o ƒë√≥n kh√°ch h√†ng ƒë·∫øn tham quan c∆° s·ªü v√† tr·ª±c ti·∫øp tr·∫£i nghi·ªám ch·∫•t
              l∆∞·ª£ng d·ªãch v·ª•.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-6 mb-8">
            <div className="text-center p-6 bg-primary-50 rounded-xl">
              <MapIcon />
              <h4 className="font-semibold text-gray-900 mt-3 mb-2">ƒê·ªãa ch·ªâ</h4>
              <p className="text-sm text-gray-600">
                541 Tr·∫ßn H∆∞ng ƒê·∫°o
                <br />
                Ph∆∞·ªùng Ph√∫ L·ª£i, TP C·∫ßn Th∆°
              </p>
            </div>

            <div className="text-center p-6 bg-success-50 rounded-xl">
              <CalendarIcon />
              <h4 className="font-semibold text-gray-900 mt-3 mb-2">Gi·ªù m·ªü c·ª≠a</h4>
              <p className="text-sm text-gray-600">
                T2-T7: 7:00 - 19:00
                <br />
                CN: 8:00 - 17:00
              </p>
            </div>

            <div className="text-center p-6 bg-secondary-50 rounded-xl">
              <EyeIcon />
              <h4 className="font-semibold text-gray-900 mt-3 mb-2">Tham quan</h4>
              <p className="text-sm text-gray-600">
                Mi·ªÖn ph√≠ tham quan
                <br />
                Kh√¥ng c·∫ßn ƒë·∫∑t l·ªãch tr∆∞·ªõc
              </p>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/contact" className="btn btn-primary">
              Xem th√¥ng tin li√™n h·ªá
            </a>
            <a href="tel:0338037868" className="btn btn-outline">
              G·ªçi t∆∞ v·∫•n: 033-803-7868
            </a>
            <button onClick={() => setShowVirtualTour(true)} className="btn btn-secondary">
              Tour ·∫£o 360¬∞
            </button>
          </div>
        </div>

        {/* Virtual Tour Modal */}
        {showVirtualTour && (
          <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
              <div className="flex items-center justify-between p-6 border-b border-gray-200">
                <h3 className="text-xl font-bold text-gray-900">
                  Tour ·∫£o 360¬∞ - Ti·ªám S·ª≠a Xe H·ªìng H·∫≠u
                </h3>
                <button
                  onClick={() => setShowVirtualTour(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
              </div>

              <div className="p-6">
                <div className="aspect-video bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center text-white">
                  <div className="text-center">
                    <PlayIcon />
                    <h4 className="text-xl font-bold mt-4 mb-2">Tour ·∫£o 360¬∞</h4>
                    <p className="text-primary-100">T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn</p>
                    <p className="text-sm text-primary-200 mt-2">
                      Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c tham quan tr·ª±c ti·∫øp
                    </p>
                  </div>
                </div>

                <div className="mt-6 flex justify-center">
                  <a href="tel:0901234567" className="btn btn-primary">
                    ƒê·∫∑t l·ªãch tham quan: 0901 234 567
                  </a>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
}
